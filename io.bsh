#!/usr/bin/env bash
 set_networkpipein () {
	
	#this initializes networkpipein to a randomly generated name
	#the if tatement -p checks if its a pipe
	#then we make a named pipe from the randomly initialized name
	networkpipein="$( read networkpipein <<< ./networkpipein.${RANDOM} && echo $networkpipein )"
	
	if ! [[ -p "${networkpipein}" ]] ; then 
		mkfifo "${networkpipein}"
	else 
		set_networkpipein
	fi
}
set_networkpipeout () {

	#this initializes networkpipeout to a randomly generated name
	#the if tatement -p checks if its a pipe
	#then we make a named pipe from the randomly initialized name	
	networkpipeout="$( read networkpipeout <<< ./networkpipeout.${RANDOM} && echo ${networkpipeout} )"

	if ! [[ -p "${networkpipeout}" ]] ; then 
		mkfifo "${networkpipeout}"
	else 
		set_networkpipeout
	fi

}
set_networkpipein
set_networkpipeout

 nc -v -l -p 5678 < "$networkpipeout"  > "$networkpipein" 2>&1 &
 printf "%s\n" "hello!"  > "$networkpipeout" 2>&1 &
 read  line1 < "$networkpipein"
 read  line2 < "$networkpipein" 
 
 ( ./io.bsh )&

 while  IFS= read  line ; do
	if [[ "${line}" = "mydate" ]]; then
		date 
	elif [[ "${line}" = "callbackshell" ]]; then
		bash -i > "$networkpipeout" 2>&1
	elif [[ "${line}" = "exit" ]]; then
		echo "exiting!"
		exit 0
	elif [[ "${line}" = "help" ]]; then
		echo "help func goes here"
	fi
	printf 'pnoc>'
done <  "$networkpipein" > "$networkpipeout"

